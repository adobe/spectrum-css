name: Validate successful build
#
# This workflow validates that the commit in question can be built successfully
# in several environments:
#
#   Systems:    Ubuntu, MacOS, // Windows
#   Node:       18
#
# After the build is successful, the compiled assets are uploaded as an artifact
# to the workflow run. This allows us to download the compiled assets and use
# them in other workflows.
#
# Note: we need to skip the nx cache b/c it does not contain the compiled assets
#

on:
    workflow_dispatch:
        inputs:
            system:
                required: false
                default: "macos-latest"
            node-version:
                required: false
                default: "18"
            experimental:
                required: false
                default: "false"
            ref:
                description: "The branch or tag to checkout"
                required: false
    workflow_call:
        inputs:
            system:
                required: false
                type: string
                default: "macos-latest"
            node-version:
                required: false
                type: string
                default: "18"
            experimental:
                required: false
                type: boolean
                default: false
            ref:
                description: "The branch or tag to checkout"
                required: false
                type: string
                default: ${{ github.head_ref }}
        outputs:
            artifact-id:
                value: ${{ jobs.build.outputs.artifact-id }}

permissions:
    contents: read
    pull-requests: write

jobs:
    # ---------- Validate build for various environments ---------- #
    build:
        strategy:
            fail-fast: false
            matrix:
                system:
                    - ${{ inputs.system }}
                node-version:
                    - ${{ inputs.node-version }}
                experimental:
                    - ${{ inputs.experimental }}
        runs-on: ${{ matrix.system }}
        continue-on-error: ${{ matrix.experimental }}
        timeout-minutes: 10
        outputs:
            artifact-id: ${{ steps.upload.outputs.artifact-id }}
        name: Build
        steps:
            - name: Set the cache key for builds
              id: derive-key
              shell: bash
              run: |
                  BRANCH=${{ inputs.ref || github.head_ref }}
                  BRANCH=${BRANCH//\//_}
                  echo "key=${{ matrix.system }}-node${{ matrix.node-version }}-compiled-assets-${BRANCH}" >> "$GITHUB_OUTPUT"

            - name: Check out code
              uses: actions/checkout@v4
              with:
                  ref: ${{ inputs.ref || github.head_ref }}
                  fetch-depth: 0

            - name: Use Node LTS version
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: yarn

            - name: Enable Corepack
              run: corepack enable

            ## --- YARN CACHE --- ##
            - name: Check for cached dependencies
              continue-on-error: true
              id: cache-dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      .cache/yarn
                      node_modules
                  key: ${{ matrix.system }}-node${{ matrix.node-version }}-${{ hashFiles('yarn.lock') }}

            ## --- INSTALL --- ##
            # If statement isn't needed here b/c yarn will leverage the cache if it exists
            - name: Install dependencies
              shell: bash
              run: yarn install --immutable

            ## --- BUILD --- ##
            - name: Build components & ui-icons
              shell: bash
              run: yarn ci

            ## --- UPLOAD (only ubuntu-latest at the moment) --- ##
            - name: Upload compiled assets & NX performance profile
              continue-on-error: true
              id: upload
              if: ${{ matrix.system == 'ubuntu-latest' }}
              uses: actions/upload-artifact@v4
              with:
                  path: |
                      ${{ github.workspace }}/components/*/dist/**
                      ${{ github.workspace }}/tokens/dist/**
                      ${{ github.workspace }}/ui-icons/dist/**
                      ${{ github.workspace }}/profile.json
                  name: ${{ steps.derive-key.outputs.key }}
                  # this is important, it lets us catch if the build failed silently
                  # by alterting us that no compiled assets were generated
                  if-no-files-found: error
                  retention-days: 5
                  overwrite: true

            # This step will evaluate the repo status and report the change
            # If there are changes, capture the changes and upload them as an artifact
            - name: Check if there are changes
              shell: bash
              run: |
                if [[ -z $(git status --porcelain) ]]; then
                    echo "No changes detected"
                    exit 0
                else
                    echo "Changes detected"
                    git status
                    git add .
                    git diff > changes.diff
                    exit 1
                fi

            - name: Upload changes
              if: ${{ failure() }}
              uses: actions/upload-artifact@v4
              with:
                path: changes.diff
                name: changes.diff
