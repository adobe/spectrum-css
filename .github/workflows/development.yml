name:
  Verify

  # This workflow will build and verify pull requests. It will:
  # - Build the base branch and the PR branch
  # - Compare the compiled output of the two branches
  # - Run visual regression tests on the PR branch
  # - Publish the PR branch to Netlify for review

on:
  pull_request:
    branches:
      - main
      # Allow us to run tests for PRs updating github actions
      - chore-*ci*
      - chore-*github-actions*

    # todo: we can get even more detailed with this later by evaluating what influences the built assets
    paths-ignore:
      - "LICENSE"
      - "*.hbs"
      - "plugins/conventional-changelog-spectrum/**"

    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled
      - auto_merge_enabled

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  # --- Validate build for various environments --- #
  build:
    name: Build
    # Check that the PR is not in draft mode (or if it is, that it has the run_ci label to force a build)
    # if: ${{ github.event.pull_request.draft != 'true' || contains(github.event.pull_request.labels.*.name, 'run_ci') }}
    strategy:
      fail-fast: false
      matrix:
        system:
          - macos-latest
          - ubuntu-latest
          # - windows-latest
        node-version:
          - 18
    uses: ./.github/workflows/build.yml
    with:
      system: ${{ matrix.system }}
      node-version: ${{ matrix.node-version }}
    secrets: inherit

  # --- Compare the compiled assets --- #
  compare:
    name: Compare
    needs: [build]
    # Check that the PR is not in draft mode (or if it is, that it has the run_ci label to force a build)
    if: ${{ github.event.pull_request.draft != 'true' || contains(github.event.pull_request.labels.*.name, 'run_ci') }}
    uses: ./.github/workflows/compare-results.yml
    with:
      base-sha: ${{ needs.build.outputs.base-sha }}
      head-sha: ${{ needs.build.outputs.head-sha }}
    secrets: inherit

  # --- Lint pre-compiled assets for consistency --- #
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      # install but don't build - we're linting pre-compiled assets
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node LTS version
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: set-SHAs
        uses: nrwl/nx-set-shas@v3

      ## --- YARN CACHE --- ##
      - name: Check for cached dependencies
        continue-on-error: true
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            .cache/yarn
            node_modules
          key: ubuntu-latest-node18-${{ hashFiles('yarn.lock') }}

      ## --- INSTALL --- ##
      # If statement isn't needed here b/c yarn will leverage the cache if it exists
      - name: Install dependencies
        shell: bash
        run: yarn install --frozen-lockfile --cache-folder .cache/yarn

      - name: Get list of changed files
        id: files
        uses: tj-actions/changed-files@v37
        with:
          files_yaml: |
            styles:
              - components/*/*.css
              - components/*/themes/*.css
            eslint:
              - components/*/package.json
              - components/*/project.json
              - components/*/stories/*.js

      - name: Lint component styles
        if: ${{ steps.files.outputs.styles_added_files != '' || steps.files.outputs.styles_modified_files != '' }}
        uses: reviewdog/action-stylelint@v1.18.1
        with:
          fail_on_error: true
          level: error
          reporter: github-pr-review
          filter_mode: file
          stylelint_input: ${{ steps.files.outputs.styles_added_files }} ${{ steps.files.outputs.styles_modified_files }}
          stylelint_config: stylelint.config.js

      # @todo debug eslint failures; potentially related to the amount of files to parse in the OG branch
      # - name: Run eslint on packages and stories
      #   uses: reviewdog/action-eslint@v1.20.0
      #   if: ${{ steps.files.outputs.eslint_added_files != '' || steps.files.outputs.eslint_modified_files != '' }}
      #   with:
      #     fail_on_error: true
      #     level: error
      #     reporter: github-pr-review
      #     filter_mode: file
      #     eslint_flags: ${{ steps.files.outputs.eslint_added_files }} ${{ steps.files.outputs.eslint_modified_files }}

  # --- RUN VISUAL REGRESSION TESTS --- #
  # Run VRT on:
  #   - ALL pull_request where:
  #     - PR has label 'run_vrt'
  #     - NOT in draft UNLESS labels includes 'run_ci'
  #     - PR is mergeable
  # Note: mergeable implies ONLY that no merge conflicts with the base
  #   branch; nothing about other checks, like CI, passing.
  # Note: 'skip_vrt' label is used to pass the tasks but not actually
  #   publish to Chromatic
  # --- #
  vrt:
    name: Testing
    needs: [build]
    if: ${{ contains(github.event.pull_request.labels.*.name, 'run_vrt') || ((github.event.pull_request.draft != true || contains(github.event.pull_request.labels.*.name, 'run_ci')) && github.event.pull_request.mergeable == true) }}
    uses: ./.github/workflows/vrt.yml
    with:
      skip: ${{ contains(github.event.pull_request.labels.*.name, 'skip_vrt') }}
    secrets: inherit

  # --- PUBLISH TO NETLIFY --- #
  # Publish to netlify by leveraging the previous build and then building the site as well
  # --- #
  publish_site:
    name: Publish
    runs-on: ubuntu-latest
    # The build step ensures we are leveraging the cache for the build
    needs: [build, vrt]
    # Note: the goal here is to allow vrt to be skipped but still require the build to succeed
    if: ${{ always() && (needs.vrt.result == 'success' || needs.vrt.result == 'skipped') && needs.build.result == 'success' }}
    steps:
      ## --- SETUP --- ##
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node LTS version
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: yarn.lock


      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: set-SHAs
        uses: nrwl/nx-set-shas@v3

      ## --- YARN CACHE --- ##
      - name: Check for cached dependencies
        continue-on-error: true
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            .cache/yarn
            node_modules
          key: ubuntu-latest-node18-${{ hashFiles('yarn.lock') }}

      ## --- INSTALL --- ##
      # note: if cache-hit isn't needed b/c yarn will leverage the cache if it exists
      - name: Install dependencies
        shell: bash
        run: yarn install --frozen-lockfile --cache-folder .cache/yarn

      - name: Reset nx cache to prevent cross-machine errors
        shell: bash
        run: yarn cache:clean

      ## --- BUILD --- ##
      - name: Check for cached build assets
        continue-on-error: true
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            components/*/dist/**
          key: ubuntu-latest-node18-compiled-assets-${{ steps.set-SHAs.outputs.head }}

      - name: Build docs site
        shell: bash
        run: yarn build site
        env:
          CHROMATIC_URL: ${{ needs.vrt.outputs.storybook-url }}

      ## --- DEPLOY WEBSITE TO NETLIFY --- ##
      - name: Deploy
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: site/dist
          production-branch: main
          production-deploy: false
          netlify-config-path: ./netlify.toml
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: ${{ github.event.pull_request.title }}
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          alias: pr-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN_GH_ACTIONS_DEPLOY }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10
