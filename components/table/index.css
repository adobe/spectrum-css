/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

@import "../vars/css/components/spectrum-table.css";

.spectrum-Table {
  border-collapse: separate;
  border-spacing: 0;
}

.spectrum-Table--sizeS {
  @remapvars {
    find: /--spectrum-table(.*)-s-/;
    filter: color;
    replace: --spectrum-table$1-;
  }
}

.spectrum-Table--sizeM {
  @remapvars {
    find: /--spectrum-table(.*)-m-/;
    filter: color;
    replace: --spectrum-table$1-;
  }
}


.spectrum-Table-sortedIcon {
  display: none;
  margin-inline-start: var(--spectrum-table-regular-header-sort-icon-gap);

  vertical-align: middle;

  transition: transform var(--spectrum-global-animation-duration-100) ease-in-out;
}

.spectrum-Table-headCell {
  box-sizing: border-box;
  text-align: start;
  font-size: var(--spectrum-table-regular-header-text-size);
  font-weight: var(--spectrum-table-regular-header-text-font-weight);
  line-height: var(--spectrum-table-regular-header-text-line-height);
  min-block-size: var(--spectrum-table-regular-header-min-height);
  letter-spacing: var(--spectrum-table-regular-header-text-letter-spacing);
  text-transform: uppercase;
  padding-block: var(--spectrum-table-regular-header-padding-top) var(--spectrum-table-regular-header-padding-bottom);
  padding-inline: var(--spectrum-table-regular-header-padding-left) var(--spectrum-table-regular-header-padding-right);
  transition: color var(--spectrum-global-animation-duration-100) ease-in-out;
  cursor: default;
  outline: 0;
  border-radius: var(--spectrum-table-regular-header-border-radius);

  &.is-sortable {
    cursor: pointer;
  }

  &.is-sorted-asc,
  &.is-sorted-desc {
    .spectrum-Table-sortedIcon {
      display: inline-block;
      /* offset icon because it's not properly aligned */
      margin-block-start: calc(var(--spectrum-global-dimension-size-25) * -1);
    }
  }

  &.is-sorted-asc {
    .spectrum-Table-sortedIcon {
      transform: rotateZ(-90deg);
    }
  }
}

.spectrum-Table-cell--alignCenter {
  text-align: center;
}

.spectrum-Table-cell--alignRight {
  text-align: end;
}

/* Helper for shared drop target overlay */
%drop-target {
  &::before {
    content: '';
    position: absolute;
    inset-block-start: 0;
    inset-inline-start: 0;
    inset-block-end: 0;
    inset-inline-end: 0;
    z-index: 1;
  }
}

.spectrum-Table-body {
  position: relative;

  border-width: var(--spectrum-table-regular-border-size);
  border-radius: var(--spectrum-table-regular-border-radius);
  overflow: auto;
  vertical-align: var(--spectrum-table-regular-cell-vertical-alignment);

  &.is-drop-target {
    @inherit: %drop-target;
  }
}

/* The tbody tag doesn't allow setting a border-radius, so these hacks are to make that work
   by putting it on the individual cells instead. */
.spectrum-Table:not(.spectrum-Table--quiet) {
  tbody.spectrum-Table-body {
    border-width: var(--spectrum-table-regular-border-size);
    border-radius: var(--spectrum-table-regular-border-radius);

    .spectrum-Table-row:first-child .spectrum-Table-cell:first-child {
      border-start-start-radius: var(--spectrum-table-regular-border-radius);
    }

    .spectrum-Table-row:first-child .spectrum-Table-cell:last-child {
      border-start-end-radius: var(--spectrum-table-regular-border-radius);
    }

    .spectrum-Table-row:last-child .spectrum-Table-cell:first-child {
      border-end-start-radius: var(--spectrum-table-regular-border-radius);
    }

    .spectrum-Table-row:last-child .spectrum-Table-cell:last-child {
      border-end-end-radius: var(--spectrum-table-regular-border-radius);
    }
  }
}

.spectrum-Table-cell {
  box-sizing: border-box;
  font-size: var(--spectrum-table-regular-cell-text-size);
  font-weight: var(--spectrum-table-regular-cell-text-font-weight);
  line-height: var(--spectrum-table-regular-cell-text-line-height);
  padding-block: var(--spectrum-table-regular-cell-padding-top) var(--spectrum-table-regular-cell-padding-bottom);
  padding-inline: var(--spectrum-table-regular-cell-padding-left) var(--spectrum-table-regular-cell-padding-right);
  /* Subtract top/bottom padding for this value to be correct in this implementation */
  min-block-size: calc(var(--spectrum-table-regular-cell-min-height) - calc(var(--spectrum-table-regular-cell-padding-top) + var(--spectrum-table-regular-cell-padding-bottom)));
}

.spectrum-Table-cell,
.spectrum-Table-headCell {
  position: relative;

  &:focus-ring,
  &.is-focused {
    outline: none;

    &::before {
      content: '';

      /* Float above border */
      z-index: 1;
      position: absolute;

      inset-block-start: 0;
      inset-inline-end: 0;
      inset-block-end: 0;
      inset-inline-start: 0;

      border-radius: calc(var(--spectrum-table-regular-cell-border-radius-key-focus) - 1px);
    }
  }
}

.spectrum-Table-headCell {
  &:focus-ring,
  &.is-focused {
    &::before {
      inset-block-start: var(--spectrum-table-regular-border-size);
      inset-inline-end: var(--spectrum-table-regular-border-size);
      inset-block-end: var(--spectrum-table-regular-border-size);
      inset-inline-start: var(--spectrum-table-regular-border-size);
    }
  }
}

.spectrum-Table-cell--divider {
  border-inline-end-width: var(--spectrum-table-regular-divider-border-size);
}

.spectrum-Table-row {
  position: relative;
  cursor: pointer;
  transition: background-color var(--spectrum-global-animation-duration-100) ease-in-out;

  &:focus {
    outline: 0;
  }

  &.is-drop-target {
    @inherit: %drop-target;
  }
}

.spectrum-Table > .spectrum-Table-body > .spectrum-Table-row:last-of-type {
  border-block-end-style: none;
}

.spectrum-Table--quiet {
  .spectrum-Table-body {
    border-radius: var(--spectrum-table-regular-quiet-border-radius);
  }

  .spectrum-Table-body,
  .spectrum-Table-row {
    &.is-drop-target {
      &::before {
        border-radius: var(--spectrum-alias-border-radius-regular);
      }
    }
  }
}

.spectrum-Table-checkboxCell {
  padding-inline-end: var(--spectrum-table-regular-cell-checkbox-padding-right);
  /* have to eliminate vertical padding to allow proper vertical alignment */
  padding-block-start: 0px;
  padding-block-end: 0px;
  vertical-align: var(--spectrum-table-regular-cell-checkbox-vertical-alignment);
}

.spectrum-Table-checkbox {
  vertical-align: super;
}

.spectrum-Table--compact {
  .spectrum-Table-sortedIcon {
    display: none;
    margin-inline-start: var(--spectrum-table-compact-header-sort-icon-gap);

    vertical-align: middle;

    transition: transform var(--spectrum-global-animation-duration-100) ease-in-out;
  }

  .spectrum-Table-headCell {
    box-sizing: border-box;
    text-align: start;
    font-size: var(--spectrum-table-compact-header-text-size);
    font-weight: var(--spectrum-table-compact-header-text-font-weight);
    line-height: var(--spectrum-table-compact-header-text-line-height);
    min-block-size: var(--spectrum-table-compact-header-min-height);
    letter-spacing: var(--spectrum-table-compact-header-text-letter-spacing);
    text-transform: uppercase;
    padding-block: var(--spectrum-table-compact-header-padding-top) var(--spectrum-table-compact-header-padding-bottom);
    padding-inline: var(--spectrum-table-compact-header-padding-left) var(--spectrum-table-compact-header-padding-right);
    transition: color var(--spectrum-global-animation-duration-100) ease-in-out;
    cursor: default;
    outline: 0;
    border-radius: var(--spectrum-table-compact-header-border-radius);

    &.is-sortable {
      cursor: pointer;
    }

    &.is-sorted-asc,
    &.is-sorted-desc {
      .spectrum-Table-sortedIcon {
        display: inline-block;
        /* offset icon because it's not properly aligned */
        margin-block-start: calc(var(--spectrum-global-dimension-size-25) * -1);
      }
    }

    &.is-sorted-asc {
      .spectrum-Table-sortedIcon {
        transform: rotateZ(-90deg);
      }
    }
  }

  .spectrum-Table-cell--alignCenter {
    text-align: center;
  }

  .spectrum-Table-cell--alignRight {
    text-align: end;
  }

  /* Helper for shared drop target overlay */
  %drop-target {
    &::before {
      content: '';
      position: absolute;
      inset-block-start: 0;
      inset-inline-start: 0;
      inset-block-end: 0;
      inset-inline-end: 0;
      z-index: 1;
    }
  }

  .spectrum-Table-body {
    position: relative;

    border-width: var(--spectrum-table-compact-border-size);
    border-radius: var(--spectrum-table-compact-border-radius);
    overflow: auto;
    vertical-align: var(--spectrum-table-compact-cell-vertical-alignment);

    &.is-drop-target {
      @inherit: %drop-target;
    }
  }

  /* The tbody tag doesn't allow setting a border-radius, so these hacks are to make that work
    by putting it on the individual cells instead. */
  .spectrum-Table:not(.spectrum-Table--quiet) {
    tbody.spectrum-Table-body {
      border-width: var(--spectrum-table-compact-border-size);
      border-radius: var(--spectrum-table-compact-border-radius);

      .spectrum-Table-row:first-child .spectrum-Table-cell:first-child {
        border-start-start-radius: var(--spectrum-table-compact-border-radius);
      }

      .spectrum-Table-row:first-child .spectrum-Table-cell:last-child {
        border-start-end-radius: var(--spectrum-table-compact-border-radius);
      }

      .spectrum-Table-row:last-child .spectrum-Table-cell:first-child {
        border-end-start-radius: var(--spectrum-table-compact-border-radius);
      }

      .spectrum-Table-row:last-child .spectrum-Table-cell:last-child {
        border-end-end-radius: var(--spectrum-table-compact-border-radius);
      }
    }
  }

  .spectrum-Table-cell {
    box-sizing: border-box;
    font-size: var(--spectrum-table-compact-cell-text-size);
    font-weight: var(--spectrum-table-compact-cell-text-font-weight);
    line-height: var(--spectrum-table-compact-cell-text-line-height);
    padding-block: var(--spectrum-table-compact-cell-padding-top) var(--spectrum-table-compact-cell-padding-bottom);
    padding-inline: var(--spectrum-table-compact-cell-padding-left) var(--spectrum-table-compact-cell-padding-right);
    /* Subtract top/bottom padding for this value to be correct in this implementation */
    min-block-size: calc(var(--spectrum-table-compact-cell-min-height) - calc(var(--spectrum-table-compact-cell-padding-top) + var(--spectrum-table-compact-cell-padding-bottom)));
  }

  .spectrum-Table-cell,
  .spectrum-Table-headCell {
    position: relative;

    &:focus-ring,
    &.is-focused {
      outline: none;

      &::before {
        content: '';

        /* Float above border */
        z-index: 1;
        position: absolute;

        inset-block-start: 0;
        inset-inline-end: 0;
        inset-block-end: 0;
        inset-inline-start: 0;

        border-radius: calc(var(--spectrum-table-compact-cell-border-radius-key-focus) - 1px);
      }
    }
  }

  .spectrum-Table-headCell {
    &:focus-ring,
    &.is-focused {
      &::before {
        inset-block-start: var(--spectrum-table-compact-border-size);
        inset-inline-end: var(--spectrum-table-compact-border-size);
        inset-block-end: var(--spectrum-table-compact-border-size);
        inset-inline-start: var(--spectrum-table-compact-border-size);
      }
    }
  }

  .spectrum-Table-cell--divider {
    border-inline-end-width: var(--spectrum-table-compact-divider-border-size);
  }

  .spectrum-Table-row {
    position: relative;
    cursor: pointer;
    transition: background-color var(--spectrum-global-animation-duration-100) ease-in-out;

    &:focus {
      outline: 0;
    }

    &.is-drop-target {
      @inherit: %drop-target;
    }
  }

  .spectrum-Table > .spectrum-Table-body > .spectrum-Table-row:last-of-type {
    border-block-end-style: none;
  }

  .spectrum-Table--quiet {
    .spectrum-Table-body {
      border-radius: var(--spectrum-table-compact-quiet-border-radius);
    }

    .spectrum-Table-body,
    .spectrum-Table-row {
      &.is-drop-target {
        &::before {
          border-radius: var(--spectrum-alias-border-radius-regular);
        }
      }
    }
  }

  .spectrum-Table-checkboxCell {
    padding-inline-end: var(--spectrum-table-compact-cell-checkbox-padding-right);
    /* have to eliminate vertical padding to allow proper vertical alignment */
    padding-block-start: 0px;
    padding-block-end: 0px;
    vertical-align: var(--spectrum-table-compact-cell-checkbox-vertical-alignment);
  }

  .spectrum-Table-checkbox {
    vertical-align: super;
  }
}

.spectrum-Table--spacious {
  .spectrum-Table-sortedIcon {
    display: none;
    margin-inline-start: var(--spectrum-table-spacious-header-sort-icon-gap);

    vertical-align: middle;

    transition: transform var(--spectrum-global-animation-duration-100) ease-in-out;
  }

  .spectrum-Table-headCell {
    box-sizing: border-box;
    text-align: start;
    font-size: var(--spectrum-table-spacious-header-text-size);
    font-weight: var(--spectrum-table-spacious-header-text-font-weight);
    line-height: var(--spectrum-table-spacious-header-text-line-height);
    min-block-size: var(--spectrum-table-spacious-header-min-height);
    letter-spacing: var(--spectrum-table-spacious-header-text-letter-spacing);
    text-transform: uppercase;
    padding-block: var(--spectrum-table-spacious-header-padding-top) var(--spectrum-table-spacious-header-padding-bottom);
    padding-inline: var(--spectrum-table-spacious-header-padding-left) var(--spectrum-table-spacious-header-padding-right);
    transition: color var(--spectrum-global-animation-duration-100) ease-in-out;
    cursor: default;
    outline: 0;
    border-radius: var(--spectrum-table-spacious-header-border-radius);

    &.is-sortable {
      cursor: pointer;
    }

    &.is-sorted-asc,
    &.is-sorted-desc {
      .spectrum-Table-sortedIcon {
        display: inline-block;
        /* offset icon because it's not properly aligned */
        margin-block-start: calc(var(--spectrum-global-dimension-size-25) * -1);
      }
    }

    &.is-sorted-asc {
      .spectrum-Table-sortedIcon {
        transform: rotateZ(-90deg);
      }
    }
  }

  .spectrum-Table-cell--alignCenter {
    text-align: center;
  }

  .spectrum-Table-cell--alignRight {
    text-align: end;
  }

  /* Helper for shared drop target overlay */
  %drop-target {
    &::before {
      content: '';
      position: absolute;
      inset-block-start: 0;
      inset-inline-start: 0;
      inset-block-end: 0;
      inset-inline-end: 0;
      z-index: 1;
    }
  }

  .spectrum-Table-body {
    position: relative;

    border-width: var(--spectrum-table-spacious-border-size);
    border-radius: var(--spectrum-table-spacious-border-radius);
    overflow: auto;
    vertical-align: var(--spectrum-table-spacious-cell-vertical-alignment);

    &.is-drop-target {
      @inherit: %drop-target;
    }
  }

  /* The tbody tag doesn't allow setting a border-radius, so these hacks are to make that work
    by putting it on the individual cells instead. */
  .spectrum-Table:not(.spectrum-Table--quiet) {
    tbody.spectrum-Table-body {
      border-width: var(--spectrum-table-spacious-border-size);
      border-radius: var(--spectrum-table-spacious-border-radius);

      .spectrum-Table-row:first-child .spectrum-Table-cell:first-child {
        border-start-start-radius: var(--spectrum-table-spacious-border-radius);
      }

      .spectrum-Table-row:first-child .spectrum-Table-cell:last-child {
        border-start-end-radius: var(--spectrum-table-spacious-border-radius);
      }

      .spectrum-Table-row:last-child .spectrum-Table-cell:first-child {
        border-end-start-radius: var(--spectrum-table-spacious-border-radius);
      }

      .spectrum-Table-row:last-child .spectrum-Table-cell:last-child {
        border-end-end-radius: var(--spectrum-table-spacious-border-radius);
      }
    }
  }

  .spectrum-Table-cell {
    box-sizing: border-box;
    font-size: var(--spectrum-table-spacious-cell-text-size);
    font-weight: var(--spectrum-table-spacious-cell-text-font-weight);
    line-height: var(--spectrum-table-spacious-cell-text-line-height);
    padding-block: var(--spectrum-table-spacious-cell-padding-top) var(--spectrum-table-spacious-cell-padding-bottom);
    padding-inline: var(--spectrum-table-spacious-cell-padding-left) var(--spectrum-table-spacious-cell-padding-right);
    /* Subtract top/bottom padding for this value to be correct in this implementation */
    min-block-size: calc(var(--spectrum-table-spacious-cell-min-height) - calc(var(--spectrum-table-spacious-cell-padding-top) + var(--spectrum-table-spacious-cell-padding-bottom)));
  }

  .spectrum-Table-cell,
  .spectrum-Table-headCell {
    position: relative;

    &:focus-ring,
    &.is-focused {
      outline: none;

      &::before {
        content: '';

        /* Float above border */
        z-index: 1;
        position: absolute;

        inset-block-start: 0;
        inset-inline-end: 0;
        inset-block-end: 0;
        inset-inline-start: 0;

        border-radius: calc(var(--spectrum-table-spacious-cell-border-radius-key-focus) - 1px);
      }
    }
  }

  .spectrum-Table-headCell {
    &:focus-ring,
    &.is-focused {
      &::before {
        inset-block-start: var(--spectrum-table-spacious-border-size);
        inset-inline-end: var(--spectrum-table-spacious-border-size);
        inset-block-end: var(--spectrum-table-spacious-border-size);
        inset-inline-start: var(--spectrum-table-spacious-border-size);
      }
    }
  }

  .spectrum-Table-cell--divider {
    border-inline-end-width: var(--spectrum-table-spacious-divider-border-size);
  }

  .spectrum-Table-row {
    position: relative;
    cursor: pointer;
    transition: background-color var(--spectrum-global-animation-duration-100) ease-in-out;

    &:focus {
      outline: 0;
    }

    &.is-drop-target {
      @inherit: %drop-target;
    }
  }

  .spectrum-Table > .spectrum-Table-body > .spectrum-Table-row:last-of-type {
    border-block-end-style: none;
  }

  .spectrum-Table--quiet {
    .spectrum-Table-body {
      border-radius: var(--spectrum-table-spacious-quiet-border-radius);
    }

    .spectrum-Table-body,
    .spectrum-Table-row {
      &.is-drop-target {
        &::before {
          border-radius: var(--spectrum-alias-border-radius-regular);
        }
      }
    }
  }

  .spectrum-Table-checkboxCell {
    padding-inline-end: var(--spectrum-table-spacious-cell-checkbox-padding-right);
    /* have to eliminate vertical padding to allow proper vertical alignment */
    padding-block-start: 0px;
    padding-block-end: 0px;
    vertical-align: var(--spectrum-table-spacious-cell-checkbox-vertical-alignment);
  }

  .spectrum-Table-checkbox {
    vertical-align: super;
  }
}
