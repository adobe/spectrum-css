/*
Copyright 2022 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

@import "../commons/overlay-coretokens.css";

.spectrum-Popover {
  --spectrum-popover-corner-radius: var(--spectrum-corner-radius-100);

  --spectrum-popover-pointer-width: var(--spectrum-popover-tip-width);
  --spectrum-popover-pointer-height: var(--spectrum-popover-tip-height);

   /* default pointer spacing from edge - same as corner radius */
  --spectrum-popover-pointer-edge-spacing-minimum: var(--spectrum-corner-radius-100);

  /* TODO - cross offset margin available to customize - default is 0 */

  --spectrum-popover-spacing-vertical: var(--spectrum-popover-top-to-content-area);
  --spectrum-popover-spacing-to-source: var(--spectrum-spacing-100);
  --spectrum-popover-spacing-container: var(--spectrum-spacing-100);

  --spectrum-popover-background-color: var(--spectrum-background-layer-2-color);

  --spectrum-popover-border-width: var(--spectrum-border-width-100);
  --spectrum-popover-border-color: var(--spectrum-gray-400);

  --spectrum-popover-shadow-horizontal: var(--spectrum-drop-shadow-x);
  --spectrum-popover-shadow-vertical: var(--spectrum-drop-shadow-y);
  --spectrum-popover-shadow-blur: var(--spectrum-drop-shadow-blur);
  --spectrum-popover-shadow-color: var(--spectrum-drop-shadow-color);
}

/* outer container to control spacing around component */
.spectrum-Popover {
   @inherit: %spectrum-overlay;

  /* TODO - resolve missing tokens */
  /* min-width: var(--spectrum-popover-min-width);
  min-height: var(--spectrum-popover-min-height); */

  box-sizing: border-box;
  position: absolute;

  /* default spacing outside content container */
  padding: var(--spectrum-popover-spacing-container);

  outline: none; /* Hide focus outline */

  /* default opens and animates upward */
  &.is-open {
    @inherit: %spectrum-overlay--open;
    @inherit: %spectrum-overlay--top--open;
  }

  /* inner content container with border and background styles */
  .spectrum-Popover-content {
    padding: var(--spectrum-popover-spacing-vertical) 0;

    position: relative;
    display: inline-flex;
    flex-direction: column;

    border-style: solid;
    border-radius: var(--spectrum-popover-corner-radius);
    border-color: var(--spectrum-popover-border-color);
    border-width: var(--spectrum-popover-border-width);

    background-color: var(--spectrum-popover-background-color);
    /* TODO - check if this should be filter instead of box-shadow */
    box-shadow: var(--spectrum-popover-shadow-horizontal) var(--spectrum-popover-shadow-vertical) var(--spectrum-popover-shadow-blur) var(--spectrum-popover-shadow-color);
  }

  /* has tip triangle */
  &.spectrum-Popover--withTip {
    /* add tip height to spacing to source */
    padding-bottom: calc(var(--spectrum-popover-pointer-height) + var(--spectrum-popover-spacing-to-source));
    padding-top: var(--spectrum-popover-spacing-container);

    .spectrum-Popover-content {
     /* tip triangle defaults to pointing down */
      &::before,
      &::after {
        content: "";
        position: absolute;
        height: var(--spectrum-popover-pointer-height);
        width: var(--spectrum-popover-pointer-width);
        margin: auto;
        left: 0;
        right: 0;
        top: 100%;
        clip-path: polygon(0 0, 50% 100%, 100% 0);
      }

      /* before element is triangle border */
      &::before {
        background: var(--spectrum-popover-border-color);
      }

      /* after element is the triangle fill with offset to show the border */
      &::after {
        background: var(--spectrum-popover-background-color);
        /* move fill up by 150% of border width - percentage matches 2:1 triangle ratio */
        top: calc(100% - (var(--spectrum-popover-border-width) * 1.5));
      }
    }
  }
}

/* position naming - first position term is popover position, second term is source position */
/* example: --top-left = popover is to top and source is to left */

/* popover position is at top of source - default placement */
.spectrum-Popover--top,
.spectrum-Popover--top-left,
.spectrum-Popover--top-right,
.spectrum-Popover--top-start,
.spectrum-Popover--top-end {
  /* popover animates upward ⬆ */
  &.is-open {
    @inherit: %spectrum-overlay--top--open;
  }
}

/* popover position is at bottom of source */
.spectrum-Popover--bottom,
.spectrum-Popover--bottom-left,
.spectrum-Popover--bottom-right,
.spectrum-Popover--bottom-start,
.spectrum-Popover--bottom-end {
  /* popover animates downward ⬇ */
  &.is-open {
    @inherit: %spectrum-overlay--bottom--open;
  }
}

/* popover position is right of source */
.spectrum-Popover--right,
.spectrum-Popover--right-bottom,
.spectrum-Popover--right-top {
  /* popover animates towards right ⮕ */
  &.is-open {
    @inherit: %spectrum-overlay--right--open;
  }
}

/* popover position is left of source */
.spectrum-Popover--left,
.spectrum-Popover--left-bottom,
.spectrum-Popover--left-top {
  /* popover animates towards left ⬅ */
  &.is-open {
    @inherit: %spectrum-overlay--left--open;
  }
}

/* logical property - popover is horizontally at start */
.spectrum-Popover--start,
.spectrum-Popover--start-top,
.spectrum-Popover--start-bottom {
  /* LTR read, popover animates towards left ⬅ */
  &.is-open {
    @inherit: %spectrum-overlay--left--open;
  }

  /* RTL read, popover animates towards right ⮕ */
  [dir="rtl"] & {
    &.is-open {
      @inherit: %spectrum-overlay--right--open;
    }
  }
}

/* logical property - popover is horizontally at end */
.spectrum-Popover--end,
.spectrum-Popover--end-top,
.spectrum-Popover--end-bottom {
  /* LTR read, popover animates towards right ⮕ */
  &.is-open {
    @inherit: %spectrum-overlay--right--open;
  }

  /* RTL read, popover animates towards left ⬅ */
  [dir="rtl"] & {
    &.is-open {
      @inherit: %spectrum-overlay--left--open;
    }
  }
}

/* HAS TIP - popover with triangle pointer */
.spectrum-Popover--withTip {
  /* popover position is at top of source with tip pointing down */
  &.spectrum-Popover--top,
  &.spectrum-Popover--top-left,
  &.spectrum-Popover--top-right,
  &.spectrum-Popover--top-start,
  &.spectrum-Popover--top-end {
    /* add tip height to spacing to source */
    padding-bottom: calc(var(--spectrum-popover-pointer-height) + var(--spectrum-popover-spacing-to-source));
  }

  &.spectrum-Popover--top-left {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        left: auto;
        right: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  &.spectrum-Popover--top-right{
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        left: var(--spectrum-popover-pointer-edge-spacing-minimum);
        right: auto;
      }
    }
  }

  /* logical property - popover is above, source is at start */
  &.spectrum-Popover--top-start {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        margin-inline-start: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* logical property - popover is above, source is at end */
  &.spectrum-Popover--top-end {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        margin-inline-end: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* popover position is bottom of source with tip pointing up */
  &.spectrum-Popover--bottom,
  &.spectrum-Popover--bottom-left,
  &.spectrum-Popover--bottom-right,
  &.spectrum-Popover--bottom-start,
  &.spectrum-Popover--bottom-end {
    /* add tip height to spacing to source */
    padding-top: calc(var(--spectrum-popover-pointer-height) + var(--spectrum-popover-spacing-to-source));
    padding-bottom: var(--spectrum-popover-spacing-container);

    .spectrum-Popover-content {
     /* tip triangle points up */
      &::before,
      &::after {
        top: auto;
        bottom: 100%;
        clip-path: polygon(0 100%, 50% 0, 100% 100%);
      }

      /* after element is the triangle fill with offset to show the border */
      &::after {
        /* move fill up by 150% of border width - percentage matches 2:1 triangle ratio */
        bottom: calc(100% - (var(--spectrum-popover-border-width) * 1.5));
      }
    }
  }

  /* popover position is bottom, source is at left */
  &.spectrum-Popover--bottom-left {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        left: auto;
        right: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* popover position is bottom, source is at right */
  &.spectrum-Popover--bottom-right {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        left: var(--spectrum-popover-pointer-edge-spacing-minimum);
        right: auto;
      }
    }
  }

  /* logical property - popover is below, source is at start */
  &.spectrum-Popover--bottom-start {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        margin-inline-start: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* logical property - popover is below, source is at end */
  &.spectrum-Popover--bottom-end {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        margin-inline-end: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* right popover position with tip pointing left */
  &.spectrum-Popover--right,
  &.spectrum-Popover--right-bottom,
  &.spectrum-Popover--right-top {
    /* add tip height to spacing to source */
    padding-left: calc(var(--spectrum-popover-pointer-height) + var(--spectrum-popover-spacing-to-source));
    padding-bottom: var(--spectrum-popover-spacing-container);

    .spectrum-Popover-content {
     /* tip triangle pointing left */
      &::before,
      &::after {
        /* swap height and width for vertical triangle */
        width: var(--spectrum-popover-pointer-height);
        height: var(--spectrum-popover-pointer-width);
        top: 0;
        bottom: 0;
        left: auto;
        right: 100%;
        clip-path: polygon(100% 0, 0 50%, 100% 100%);
      }

      /* after element is the triangle fill with offset to show the border */
      &::after {
        /* move fill up by 150% of border width - percentage matches 2:1 triangle ratio */
        right: calc(100% - (var(--spectrum-popover-border-width) * 1.5));
      }
    }
  }

  /* right popover position with tip at top pointing left */
  &.spectrum-Popover--right-top {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: var(--spectrum-popover-pointer-edge-spacing-minimum);
        bottom: auto;
      }
    }
  }

  /* right popover position with tip at bottom pointing left */
  &.spectrum-Popover--right-bottom {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: auto;
        bottom: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* left popover position with tip pointing right */
  &.spectrum-Popover--left,
  &.spectrum-Popover--left-bottom,
  &.spectrum-Popover--left-top {
    /* add tip height to spacing to source */
    padding-right: calc(var(--spectrum-popover-pointer-height) + var(--spectrum-popover-spacing-to-source));
    padding-bottom: var(--spectrum-popover-spacing-container);

    .spectrum-Popover-content {
     /* tip triangle points right */
      &::before,
      &::after {
        /* swap height and width for vertical triangle */
        width: var(--spectrum-popover-pointer-height);
        height: var(--spectrum-popover-pointer-width);
        top: 0;
        bottom: 0;
        right: auto;
        left: 100%;
        clip-path: polygon(0 0, 100% 50%, 0 100%);
      }

      /* after element is the triangle fill with offset to show the border */
      &::after {
        /* offset fill up by 150% of border width - percentage matches 2:1 triangle ratio */
        left: calc(100% - (var(--spectrum-popover-border-width) * 1.5));
      }
    }
  }

  /* left popover position with tip at top pointing right */
  &.spectrum-Popover--left-top {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: var(--spectrum-popover-pointer-edge-spacing-minimum);
        bottom: auto;
      }
    }
  }

  /* left popover position with tip at bottom pointing right */
  &.spectrum-Popover--left-bottom {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: auto;
        bottom: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* logical property - start popover position with tip pointing toward end */
  &.spectrum-Popover--start,
  &.spectrum-Popover--start-top,
  &.spectrum-Popover--start-bottom {
    padding-inline-end: calc(var(--spectrum-popover-pointer-height) + var(--spectrum-popover-spacing-to-source));
    padding-bottom: var(--spectrum-popover-spacing-container);

    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        /* swap height and width for vertical triangle */
        width: var(--spectrum-popover-pointer-height);
        height: var(--spectrum-popover-pointer-width);
        top: 0;
        bottom: 0;
        margin-inline-start: 100%;
        clip-path: polygon(0 0, 100% 50%, 0 100%);

        /* right to left read direction */
        [dir="rtl"] & {
          clip-path: polygon(100% 0, 0 50%, 100% 100%);
        }
      }

      /* after element is the triangle fill with offset to show the border */
      &::after {
        /* offset fill up by 150% of border width - percentage matches 2:1 triangle ratio */
        margin-inline-start: calc(100% - (var(--spectrum-popover-border-width) * 1.5));
      }
    }
  }

  /* logical property - start popover position with top tip pointing toward end  */
  &.spectrum-Popover--start-top {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: var(--spectrum-popover-pointer-edge-spacing-minimum);
        bottom: auto;
      }
    }
  }

  /* logical property - start popover position with bottom tip pointing toward end  */
  &.spectrum-Popover--start-bottom {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: auto;
        bottom: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }

  /* logical property - end popover position with tip pointing toward start */
  &.spectrum-Popover--end,
  &.spectrum-Popover--end-top,
  &.spectrum-Popover--end-bottom {
      padding-inline-start: calc(var(--spectrum-popover-pointer-height) + var(--spectrum-popover-spacing-to-source));
      padding-bottom: var(--spectrum-popover-spacing-container);

    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        /* swap height and width for vertical triangle */
        width: var(--spectrum-popover-pointer-height);
        height: var(--spectrum-popover-pointer-width);
        top: 0;
        bottom: 0;
        margin-inline-end: 100%;
        clip-path: polygon(100% 0, 0 50%, 100% 100%);

        /* right to left read direction */
        [dir="rtl"] & {
          clip-path: polygon(0 0, 100% 50%, 0 100%);
        }
      }

      /* after element is the triangle fill with offset to show the border */
      &::after {
        /* offset fill up by 150% of border width - percentage matches 2:1 triangle ratio */
        margin-inline-end: calc(100% - (var(--spectrum-popover-border-width) * 1.5));
      }
    }
  }

  /* logical property - end popover position with top tip pointing toward start */
  &.spectrum-Popover--end-top {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: var(--spectrum-popover-pointer-edge-spacing-minimum);
        bottom: auto;
      }
    }
  }

  /* logical property - end popover position with bottom tip pointing toward start */
  &.spectrum-Popover--end-bottom {
    .spectrum-Popover-content {
      /* tip triangle  */
      &::before,
      &::after {
        top: auto;
        bottom: var(--spectrum-popover-pointer-edge-spacing-minimum);
      }
    }
  }
}
