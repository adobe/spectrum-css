-
  // Backwards compatibility with old components array
  component.examples = component.examples || component.components;

  // Arrange examples for processing
  var examples;
  if (!component.examples) {
    // Only one top-level example
    examples = [component];
  }
  else {
    // Multiple child examples
    examples = component.examples;
  }

  // Fitler the list of deps since we already include vars
  var deps = dependencies.filter(function(dep) {
    return dep !== 'vars';
  });

  if (component.examples) {
    for (id in component.examples) {
      let example = component.examples[id];
      if (typeof example === 'string') {
        // Handle markup only examples
        example = {
          id: id,
          markup: example
        };
        component.examples[id] = example;
      }
      example.id = id;
    }
  }

doctype html
html(lang='en-US').spectrum.spectrum--light.spectrum--medium
  head
    meta(charset = 'utf-8')
    meta('http-equiv' = 'X-UA-Compatible', content = 'IE=edge,chrome=1')
    title #{component.name} - Spectrum CSS
    meta(name="viewport", content="user-scalable=no,initial-scale = 1.0,maximum-scale = 1.0")

    link(rel='stylesheet', type='text/css', href='dependencies/@spectrum-css/vars/spectrum-lightest.css')
    link(rel='stylesheet', type='text/css', href='dependencies/@spectrum-css/vars/spectrum-light.css')
    link(rel='stylesheet', type='text/css', href='dependencies/@spectrum-css/vars/spectrum-dark.css')
    link(rel='stylesheet', type='text/css', href='dependencies/@spectrum-css/vars/spectrum-darkest.css')
    link(rel='stylesheet', type='text/css', href='dependencies/@spectrum-css/vars/spectrum-medium.css')
    link(rel='stylesheet', type='text/css', href='dependencies/@spectrum-css/vars/spectrum-large.css')

    each dep in deps
      link(rel='stylesheet', type='text/css', href='dependencies/@spectrum-css/' + dep + '/index-vars.css')

    // Include the actual component
    link(rel='stylesheet', type='text/css', href='../index-vars.css')

    link(rel='stylesheet', type='text/css', href='css/site.css')
    link(rel='stylesheet', type='text/css', href='css/docs.css')

    script(src='js/loadicons/index.js')
    script(src='js/focus-ring-polyfill/index.js')
    script(src='js/typekit.js')
    script(src='js/SpectrumSwitcher.js')

    script.
      loadIcons('dependencies/@spectrum-css/icon/spectrum-css-icons.svg');
      var switcher = new SpectrumSwitcher();

    style(type='text/css').
      body {
        overflow: auto;
      }

      .spectrum-CSSExample-example {
        border-radius: 0;
      }

  body

    article.spectrum-CSSComponent

      header(id=component.slug).spectrum-CSSComponent-heading
        a(href=`#${component.slug}`).spectrum-BigSubtleLink.spectrum-CSSComponent-title.spectrum-Article
          h2.spectrum-Heading1--display #{component.name}
        .spectrum-CSSComponent-version.spectrum-Body Version #{pkg.version}

      if component.description
        section.spectrum-CSSComponent-description.spectrum-Body2!= util.markdown.toHTML(component.description)

      each example in examples
        article.spectrum-CSSExample
          if example != component
            header(id=example.slug)
              h4.spectrum-Heading--subtitle3 #{example.name}

            if example.description
              section.spectrum-CSSExample-description.spectrum-Body2!= util.markdown.toHTML(example.description)

          if example.markup

            section.spectrum-CSSExample-container
              .spectrum-CSSExample-example(class=example.demoClassName ? `${example.demoClassName}` : '')!= example.markup

    div.spectrum-Underlay#spectrum-underlay
